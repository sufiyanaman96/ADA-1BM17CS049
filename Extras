2..
def dfs(v):
    print(v)
    visited[v] = 1
    for i in range(n):
        if arr[v][i] and not visited[i]:
            dfs(i)

def connected():
    for i in range(n):
        if not visited[i]:
            dfs(i)
            print("\n")

arr = [[0 for i in range(5)] for j in range(5)]
visited = [0]*5
n = 5

for i in range(n):
    for j in range(n):
        t = int(input())
        arr[i][j] = t
    visited[i] = 0

connected()

5...
tasks=[[0,1],[4,0],[4,1],[2,4],[3,4],[5,3],[5,2]]
n=6

arr=[[0]*(n) for x in range(n)]
li=[]

for val in tasks:
	arr[val[0]][val[1]]=1
for i in range(len(arr)) :
	if not sum(arr[i]) :
		continue
	for j in range(len(arr)) :
		if j not in li :
			indegree=sum(arr[j])
			if indegree: continue
			if indegree==0 :
				li.append(j)
				for a in range(len(arr)) :
					arr[a][j]=0
					
if len(li)!=n : print([])
else : print(li)
3..
class Island { 
    
    int ROW = 5, COL = 5; 

    void DFS(int M[][], int r, int c, boolean visited[][]) 
    { 
        int row[] = new int[] { -1, -1, -1, 0, 0, 1, 1, 1 }; 
        int col[] = new int[] { -1, 0, 1, -1, 1, -1, 0, 1 }; 
  
  
        visited[r][c] = true;   
        for (int k = 0; k < 8; ++k) 
            if (isSafe(M, r + row[k], c + col[k], visited)) 
                DFS(M, r + row[k], c + col[k], visited); 
    }
    boolean isSafe(int M[][], int row, int col, 
                   boolean visited[][]) 
    { 
        return (row >= 0) && (row < ROW) && (col >= 0) && (col < COL) && (M[row][col] == 1 && !visited[row][col]); 
    } 
   
  
    int countIslands(int M[][]) 
    { 
        boolean visited[][] = new boolean[ROW][COL]; 
  
        int count = 0; 
        for (int i = 0; i < ROW; ++i) 
            for (int j = 0; j < COL; ++j) 
                if (M[i][j] == 1 && !visited[i][j]) 
                {   DFS(M, i, j, visited); 
                    ++count; 
                } 
  
        return count; 
    } 
}  
  public class Driver{
    public static void main(String[] args) throws java.lang.Exception 
    { 
        int M[][] = new int[][] { { 1, 1, 0, 0, 0 }, 
                                  { 0, 1, 0, 0, 1 }, 
                                  { 1, 0, 0, 1, 1 }, 
                                  { 0, 0, 0, 0, 0 }, 
                                  { 1, 0, 1, 0, 1 } }; 
        Island I = new Island(); 
        System.out.println("Number of islands is: " + I.countIslands(M)); 
    } 
} 
4..
import java.util.*;

class nqueens
{   
    public static int N;
    public static int[][] board = new int[100][100];
    public static boolean Attackable(int i,int j)
    {
        int k,l;
       
        for(k=0;k<N;k++)
        {
            if((board[i][k] == 1) || (board[k][j] == 1))
                return true;
        }
       
        for(k=0;k<N;k++)
        {
            for(l=0;l<N;l++)
            {
                if(((k+l) == (i+j)) || ((k-l) == (i-j)))
                {
                    if(board[k][l] == 1)
                        return true;
                }
            }
        }
        return false;
    }

    public static boolean nQueen(int n)
    {
        int i,j;
       
        if(n==0)
            return true;
        for(i=0;i<N;i++)
        {
            for(j=0;j<N;j++)
            {
                if((!Attackable(i,j)) && (board[i][j]!=1))
                {
                    board[i][j] = 1;
                    
                    if(nQueen(n-1)==true)
                    {
                        return true;
                    }
                    board[i][j] = 0;
                }
            }
        }
        return false;
    }

    public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);
        
        System.out.println("Enter the value of N:");
        N = in.nextInt();

        int i,j;
        
        nQueen(N);
       
        for(i=0;i<N;i++)
        {
            for(j=0;j<N;j++)
                System.out.print(board[i][j]);
            System.out.println();
        }
        
    }
}

7..class Median
{
  void combine ( int[] arr, int low, int mid, int high )
  { 
     int i=low;
     int j=mid+1;
     int k=low;
     int [] c= new int [high+1];
     while ( i<=mid && j<=high )
     {
       if (arr[i]<arr[j])
       {
         c[k]=arr[i];
         k++;
         i++;
       }
       else 
       {
         c[k]=arr[j];
         k++;
         j++;
       }
     }
     if (i>mid)
     {
       while ( j<=high)
       {
         c[k]=arr[j];
         k++;
         j++;
       }
     }
     if (j>high)
      {
       while ( i<=mid)
       {
         c[k]=arr[i];
         k++;
         i++;
       }
     }
     for ( i=low; i<=high; i++ )
     {
       arr[i]=c[i];
     }
 }
 void split ( int [] arr, int low, int high )
 {
   if ( low<high)
  {
     int mid=(low+high)/2;
     split(arr,low,mid);
     split(arr,mid+1,high);
     combine(arr,low,mid,high);
   }
 }
  void merge(int a[], int b[], int n, int n1, int c[]) 
{ 
    int i = 0, j = 0, k = 0, count=0, flag = 0; 
    while (i<n && j <n1) 
    { 
       if (a[i] < b[j]) 
            { count++;
            c[k++] = a[i++]; 
            }
        else
            c[k++] = b[j++]; 
    } 
  
    while (i < n) 
        c[k++] = a[i++]; 
  
    while (j < n1) 
        c[k++] = b[j++]; 
    while ( count==n && flag==0)
    {
      float median= (c[n]+c[n-1])/2;
      System.out.println("Median is: "+ median); 
      flag=1;
    } 
} 

  public static void main(String args[]) 
    { 
        int arr[] = {1,12,15,26,38}; 
        int arr2[]= {2,13,17,30,45};
        int n = arr.length; 
        int n1 = arr2.length;
        int [] arr3= new int [n+n1];
        Median ob = new Median(); 
        ob.split(arr, 0, n-1); 
        ob.split(arr2, 0, n1-1);
        ob.merge(arr,arr2,n,n1,arr3);
  
    } 
}
9b...
import java.util.*;

class LAB1Additional
{   
   public static int find_lower(int []a, int n, int x)
{   Scanner in = new Scanner( System.in);  
	
        
   int first=0;
   int last=n-1;
   int mid = -1;
   int ans=-1;  
   while( first <= last )
  {   mid = (first+last)/2;
      if ( a[mid] < x ){  
        first = mid + 1;     
      }
      else if ( a[mid] == x ){  
        ans=mid;
        last=mid-1;  
        break;  
      }else{  
         last = mid - 1;  
      }  
  } 
    return ans;
}
   public static int find_higher(int []a, int n, int x)
{   Scanner in = new Scanner( System.in);  
	
        
   int first=0;
   int last=n-1;
   int mid = -1;
   int ans= -1;  
   while( first <= last )
  {   mid = (first+last)/2;
      if ( a[mid] < x ){  
        first = mid + 1;     
      }
      else if ( a[mid] == x ){  
        ans=mid;
        first=mid+1;  
        break;  
      }else{  
         last = mid - 1;  
      }  
  } 
    return ans;
}

public static void main(String[] args) throws Exception 
{
		int[] arr;
		Scanner read = new Scanner(new File("C:\\Users\\sufiy\\Desktop\\input.txt"));
		int t = read.nextInt();
		while(read.hasNextLine()) {
			read.nextLine();
			for(int j=0;j<t;j++) {
				int n = read.nextInt();
				int x = read.nextInt();
				arr = new int[n];
				
		     for(int m=0;m<n;m++) {
		    	 arr[m] = read.nextInt();
		    	 }
		     int lowindx= find_lower(arr,n,x);
                     int highindx= find_higher(arr,n,x);
                     int c= highindx-lowindx+1;
                     System.out.println(lowindx + highindx + c); 
                  }
               }
}     }              
9a...
import java,util.*;

class Array
{
 public static void func( int a, int rpnt, int key)
 {   int start,end;
     if(key>=a[0])
    {
        start=0;
        end=rpnt-1;
    }
    else
    {
        start=rpnt;
        end=n-1;
    }
    while(start<=end)
    {
        mid=start+(end-start)/2;
        if(a[mid]==key)
        {
            System.out.println("key found at index "+mid);
            flag=1;
            break;
        }
        else if(key>a[mid])
        {
            start=mid+1;
        }
        else
        {
            end=mid-1;
        }
    }
    if(flag==0)
       System.out.println("key not found..!!");
 public static void main ( String args[])
 {   Scanner in=new Scanner (System.in);
    int i,rpnt,n,key,flag=0;
    System.out.println("Enter the size of the array : ");
    n=in.nextInt();
    int [] a= new int [n];
    System.out.println("Enter the elements of the array :");
    for(i=0;i<n;i++)
    {
        a[i]=in.nextInt();
        if(a[i]<a[i-1])
        {
            rpnt=i;
        }
    }
    System.out.println("Enter the key value : ");
    key=in.nextInt();
    func(a,rpnt,key);
    
 }
}
10..
public class RatMaze { 
  
    
    static int N; 
  
    
    void printSolution(int sol[][]) 
    { 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < N; j++) 
                System.out.print(" " + sol[i][j] + " "); 
            System.out.println(); 
        } 
    } 
    boolean isSafe(int maze[][], int x, int y) 
    { 
         
        return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1); 
    }
    boolean solveMaze(int maze[][]) 
    { 
        int sol[][] = new int[N][N]; 
  
        if (solveMazeUtil(maze, 0, 0, sol) == false) { 
            System.out.print("Solution doesn't exist"); 
            return false; 
        } 
  
        printSolution(sol); 
        return true; 
    } 
    boolean solveMazeUtil(int maze[][], int x, int y, 
                          int sol[][]) 
    { 
        if (x == N - 1 && y == N - 1) { 
            sol[x][y] = 1; 
            return true; 
        } 
        if (isSafe(maze, x, y) == true) { 
            
            sol[x][y] = 1; 
            if (solveMazeUtil(maze, x + 1, y, sol)) 
                return true; 
            if (solveMazeUtil(maze, x, y + 1, sol)) 
                return true; 
            sol[x][y] = 0; 
            return false; 
        } 
  
        return false; 
    } 
  
    public static void main(String args[]) 
    { 
        RatMaze rat = new RatMaze(); 
        int maze[][] = { { 1, 0, 0, 0 }, 
                         { 1, 1, 0, 1 }, 
                         { 0, 1, 0, 0 }, 
                         { 1, 1, 1, 1 } }; 
  
        N = maze.length; 
        rat.solveMaze(maze); 
    } 
} 
6...
public class SumOfSubsets {

    int[] w;
    int[] x;
    int sum;

    public void process() {
        getData();
    }

    private void getData() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements:");
        int n = sc.nextInt();
        w = new int[n + 1];
        x = new int[n + 1];
        int total = 0;
        System.out.println("Enter " + n + " Elements :");
        for (int i = 1; i < n + 1; i++) {
            w[i] = sc.nextInt();
            total += w[i];
        }
        System.out.println("Enter the sum to be obtained: ");
        sum = sc.nextInt();
        if (total < sum) {
            System.out.println("Not possible to obtain the subset!!!");
            System.exit(1);
        }
        subset(0, 1, total);
    }

    private void subset(int s, int k, int r) {
        int i = 0;
        x[k] = 1;
        if (s + w[k] == sum) {
            System.out.println();
            for (i = 1; i <= k; i++) {
                System.out.print("\t" + x[i]);
            }
        } else if ((s + w[k] + w[k + 1]) <= sum) {
            subset(s + w[k], k + 1, r - w[k]);
        }
        if ((s + r - w[k]) >= sum && (s + w[k + 1]) <= sum) {
            x[k] = 0;
            subset(s, k + 1, r - w[k]);
        }
    }

    public static void main(String[] args) {
        new SumOfSubsets().process();
    }
}
8C++..
  
// QItem for current location and distance 
// from source location 
class QItem { 
public: 
    int row; 
    int col; 
    int dist; 
    QItem(int x, int y, int w) 
        : row(x), col(y), dist(w) 
    { 
    } 
}; 
  
int minDistance(char grid[N][M]) 
{ 
    QItem source(0, 0, 0); 
  
    // To keep track of visited QItems. Marking 
    // blocked cells as visited. 
    bool visited[N][M]; 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < M; j++) 
        { 
            if (grid[i][j] == '0') 
                visited[i][j] = true; 
            else
                visited[i][j] = false; 
  
            // Finding source 
            if (grid[i][j] == 's') 
            { 
               source.row = i; 
               source.col = j; 
            } 
        } 
    } 
  
    // applying BFS on matrix cells starting from source 
    queue<QItem> q; 
    q.push(source); 
    visited[source.row][source.col] = true; 
    while (!q.empty()) { 
        QItem p = q.front(); 
        q.pop(); 
  
        // Destination found; 
        if (grid[p.row][p.col] == 'd') 
            return p.dist; 
  
        // moving up 
        if (p.row - 1 >= 0 && 
            visited[p.row - 1][p.col] == false) { 
            q.push(QItem(p.row - 1, p.col, p.dist + 1)); 
            visited[p.row - 1][p.col] = true; 
        } 
  
        // moving down 
        if (p.row + 1 < N && 
            visited[p.row + 1][p.col] == false) { 
            q.push(QItem(p.row + 1, p.col, p.dist + 1)); 
            visited[p.row + 1][p.col] = true; 
        } 
  
        // moving left 
        if (p.col - 1 >= 0 && 
            visited[p.row][p.col - 1] == false) { 
            q.push(QItem(p.row, p.col - 1, p.dist + 1)); 
            visited[p.row][p.col - 1] = true; 
        } 
  
         // moving right 
        if (p.col + 1 < M && 
            visited[p.row][p.col + 1] == false) { 
            q.push(QItem(p.row, p.col + 1, p.dist + 1)); 
            visited[p.row][p.col + 1] = true; 
        } 
    } 
    return -1; 
} 
  
// Driver code 
int main() 
{ 
    char grid[N][M] = { { '0', '*', '0', 's' }, 
                        { '*', '0', '*', '*' }, 
                        { '0', '*', '*', '*' }, 
                        { 'd', '*', '*', '*' } }; 
  
    cout << minDistance(grid); 
    return 0; 
} 
1..
import java.util.Arrays; 
import java.util.Collections; 
  
class GFG 
{    
    public static int partition(Integer [] arr, int l,  
                                               int r) 
    { 
        int x = arr[r], i = l; 
        for (int j = l; j <= r - 1; j++) 
        { 
            if (arr[j] <= x) 
            {  
                int temp = arr[i]; 
                arr[i] = arr[j]; 
                arr[j] = temp; 
  
                i++; 
            } 
        } 
        int temp = arr[i]; 
        arr[i] = arr[r]; 
        arr[r] = temp; 
  
        return i; 
    }
    public static int kthSmallest(Integer[] arr, int l,  
                                         int r, int k) 
    { 
        if (k > 0 && k <= r - l + 1) 
        { 
            int pos = partition(arr, l, r); 
   
            if (pos-l == k-1) 
                return arr[pos]; 
            if (pos-l > k-1)  
                return kthSmallest(arr, l, pos-1, k);
            return kthSmallest(arr, pos+1, r, k-pos+l-1); 
        } 
        return Integer.MAX_VALUE; 
    } 
    public static void main(String[] args) 
    { 
        Integer arr[] = new Integer[]{12, 3, 5, 7, 4, 19, 26}; 
        int k = 3; 
        System.out.print( "K'th smallest element is " + 
                     kthSmallest(arr, 0, arr.length - 1, k) ); 
    } 
} 
