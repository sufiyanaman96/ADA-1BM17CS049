1)LCS.py
def LCS(x,y):
    L = [[0 for i in range(len(x)+1)] for j in range(len(y)+1)]
    m = len(x)+1
    n = len(y)+1

    for i in range(m):
        for j in range(n):
            if i==0 or j==0:
                L[i][j] = 0

            elif x[i-1] == y[j-1]:
                L[i][j] = L[i-1][j-1]+1
            
            else:
                L[i][j] = max(L[i-1][j],L[i][j-1])
    print(L)

    # printing LCS

    index = L[m-1][n-1]
    lcs = []
    i = m-1
    j = n-1
    while i>0 and j>0:
        if x[i-1] == y[j-1]:
            lcs.append(x[i-1])
            i-=1
            j-=1
            index-=1
        elif L[i-1][j]>L[i][j-1]:
            i-=1
        else:
            j-=1
    lcs.reverse()
    print(lcs)

x = 'abcdgh'
y = 'aedfhr'
LCS(x,y)
2)0/1 Knapsack problem.java
class Knapsack 
{ 
    public static int max(int a, int b) 
    { return (a > b)? a : b; } 
    
    public static int knapSack(int W, int wt[], int val[], int n) 
    { 
      int i, w; 
      int K[][] = new int[n+1][W+1];  
      for (i = 0; i <= n; i++) 
      { 
         for (w = 0; w <= W; w++) 
         { 
             if (i==0 || w==0) 
                  K[i][w] = 0; 
             else if (wt[i-1] <= w) 
                   K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]); 
             else
                   K[i][w] = K[i-1][w]; 
         } 
      } 
        return K[n][W]; 
    } 
    public static void main(String args[]) 
    { 
      int val[] = new int[]{60, 100, 120}; 
      int wt[] = new int[]{10, 20, 30}; 
      int  W = 50; 
      int n = val.length; 
      System.out.println(knapSack(W, wt, val, n)); 
    } 
} 
3)Min_editdist.java
class EDIST 
{ 
    static int min(int x,int y,int z) 
    { 
        if (x <= y && x <= z) return x; 
        if (y <= x && y <= z) return y; 
        else return z; 
    } 
  
    static int editDistDP(String str1, String str2, int m, int n) 
    {  
        int dp[][] = new int[m+1][n+1]; 
        for (int i=0; i<=m; i++) 
        { 
            for (int j=0; j<=n; j++) 
            { 
             if (i==0) 
                dp[i][j] = j;   
             else if (j==0) 
                dp[i][j] = i; 
             else if (str1.charAt(i-1) == str2.charAt(j-1)) 
                dp[i][j] = dp[i-1][j-1]; 
             else
                dp[i][j] = 1 + min(dp[i][j-1], 
                                   dp[i-1][j],   
                                   dp[i-1][j-1]); e 
            } 
        } 
   
        return dp[m][n]; 
    } 
   public static void main(String args[]) 
    { 
        String str1 = "sunday"; 
        String str2 = "saturday"; 
        System.out.println( editDistDP( str1 , str2 , str1.length(), str2.length()) ); 
    } 
  }
4)Smallest_range.java
class GFG 
{ 
  
    
    static class Node  
    { 
        int ele;  
        int i;    
        int j;     
  
        Node(int a, int b, int c) 
        { 
            this.ele = a; 
            this.i = b; 
            this.j = c; 
        } 
    } 
   
    static class MinHeap 
    { 
        Node[] harr; 
        int size;     
  
        MinHeap(Node[] arr, int size) 
        { 
            this.harr = arr; 
            this.size = size; 
            int i = (size - 1) / 2; 
            while (i >= 0)  
            { 
                MinHeapify(i); 
                i--; 
            } 
        } 
        int left(int i)  
        { 
            return 2 * i + 1; 
        } 
        int right(int i)  
        { 
            return 2 * i + 2; 
        } 
        void MinHeapify(int i)  
        { 
            int l = left(i); 
            int r = right(i); 
            int small = i; 
            if (l < size &&  
                harr[l].ele < harr[i].ele) 
                small = l; 
            if (r < size &&  
                harr[r].ele < harr[small].ele) 
                small = r; 
            if (small != i)  
            { 
                swap(small, i); 
                MinHeapify(small); 
            } 
        } 
  
        void swap(int i, int j) 
        { 
            Node temp = harr[i]; 
            harr[i] = harr[j]; 
            harr[j] = temp; 
        } 
        Node getMin() 
        { 
            return harr[0]; 
        } 
        void replaceMin(Node x) 
        { 
            harr[0] = x; 
            MinHeapify(0); 
        } 
    } 
    static void findSmallestRange(int[][] arr, int k)  
    { 
        int range = Integer.MAX_VALUE; 
        int min = Integer.MAX_VALUE; 
        int max = Integer.MIN_VALUE; 
        int start = -1, end = -1; 
  
        int n = arr[0].length; 
        Node[] arr1 = new Node[k]; 
        for (int i = 0; i < k; i++)  
        { 
            Node node = new Node(arr[i][0], i, 1); 
            arr1[i] = node; 
            max = Math.max(max, node.ele); 
        } 
        MinHeap mh = new MinHeap(arr1, k); 
        while (true) 
        { 
            Node root = mh.getMin(); 
            min = root.ele; 
            if (range > max - min + 1) 
            { 
                range = max - min + 1; 
                start = min; 
                end = max; 
            } 
            if (root.j < n) 
            { 
                root.ele = arr[root.i][root.j]; 
                root.j++; 
                if (root.ele > max) 
                    max = root.ele; 
            } else
                break;
            mh.replaceMin(root); 
        } 
        System.out.print("The smallest range is [" +  
                           start + " " + end + "]"); 
    } 
    public static void main(String[] args)  
    { 
        int arr[][] = {{4, 7, 9, 12, 15}, 
                       {0, 8, 10, 14, 20}, 
                       {6, 12, 16, 30, 50}}; 
  
        int k = arr.length; 
  
        findSmallestRange(arr, k); 
  
    } 
} 
5)Coin.py
n=int(input("enter number of coins : "))
coins=[0]
for i in range(n) :
    coins.append(int(input("enetr value : ")))

A = int(input("enter the sum to be made "))

def coinchange(d,c,s):
    c[0]=0
    s[0]=0
    for p in range(1,A+1) :
        mini = 9999999
        for i in range(1,n+1) :
            if d[i]<=p :
                if 1+c[p-d[i]]<mini :
                    mini = 1 + c[p - d[i]];
                    coin = i
        c.append(0)
        s.append(0)
        c[p],s[p]= mini,coin

def coinset(d,s) :
    a=A
    while(a>0) :
        print("use coin of denomination  : ",d[s[a]])
        a-=d[s[a]]


def dispaly (arr) :
    for c in range(0,A+1) :
        print(arr[c])


c=[0]*A
s=[0]*A
coinchange(coins,c,s)
print("min coins is ",c[A])
coinset(coins,s)
6)Prims_minspantree.java
import java.util.*; 
import java.lang.*; 
import java.io.*; 
  
class MST 
{ 
  private static final int V = 6; 
  int minKey(int key[], Boolean mstSet[]) 
  { 
   int min = Integer.MAX_VALUE, min_index = -1; 
   for (int v = 0; v < V; v++) 
   {        
    if (mstSet[v] == false && key[v] < min) 
    { 
       min = key[v]; 
       min_index = v; 
    } 
   }  return min_index; 
  } 
  public void printMST(int parent[], int graph[][]) 
  { 
    System.out.println("Edge \t Weight"); 
    for (int i = 1; i < V; i++) 
    System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]); 
  } 
  public void primMST(int graph[][]) 
  { 
   int parent[] = new int[V]; 
   int key[] = new int[V]; 
   Boolean mstSet[] = new Boolean[V]; 
   for (int i = 0; i < V; i++) 
   { 
     key[i] = Integer.MAX_VALUE; 
     mstSet[i] = false; 
   } 
   key[0] = 0; 
   parent[0] = -1; 
   for (int count = 0; count < V - 1; count++)
   { 
    int u = minKey(key, mstSet); 
    mstSet[u] = true; 
    for (int v = 0; v < V; v++) 
    {
     if (graph[u][v] != 0 && mstSet[v] == false && graph[u][v] < key[v]) 
     { 
        parent[v] = u; 
        key[v] = graph[u][v]; 
     } 
    } 
   }
    printMST(parent, graph); 
  } 
  public static void main(String[] args) 
  { 
        MST t = new MST(); 
        int graph[][] = new int[][] { { 0, 4, 4, 0, 0, 0 }, 
                                      { 4, 0, 2, 0, 0, 0 }, 
                                      { 4, 2, 0, 3, 4, 2 }, 
                                      { 0, 0, 3, 0, 5, 0 }, 
                                      { 0, 0, 4, 3, 0, 3 },
                                      { 0, 0, 2, 0, 3, 0 }}; 
  
        
        t.primMST(graph); 
  } 
}
7)Patition.java
import java.io.*; 
  
class Partition 
{ 
 static boolean findPartition (int arr[], int n) 
 { 
   int sum = 0; 
   int i, j; 
   for (i = 0; i < n; i++) 
      sum += arr[i]; 
   if (sum%2 != 0) 
      return false; 
   boolean part[][]=new boolean[sum/2+1][n+1]; 
   for (i = 0; i <= n; i++) 
      part[0][i] = true; 
   for (i = 1; i <= sum/2; i++) 
      part[i][0] = false; 
   for (i = 1; i <= sum/2; i++) 
   { 
    for (j = 1; j <= n; j++) 
    { 
     part[i][j] = part[i][j-1]; 
     if (i >= arr[j-1]) 
        part[i][j] = part[i][j] || 
        part[i - arr[j-1]][j-1]; 
    } 
   }
   for (i = 0; i <= sum/2; i++) 
   { 
    for (j = 0; j <= n; j++) 
       printf ("%4d", part[i][j]); 
       printf("\n"); 
   }
    return part[sum/2][n]; 
 }
 public static void main (String[] args) 
 { 
  int arr[] = {3, 1, 1, 2, 2,1}; 
  int n = arr.length; 
  if (findPartition(arr, n) == true) 
      System.out.println("Can be divided into two "
                         "subsets of equal sum"); 
  else
      System.out.println("Can not be divided into"
                        " two subsets of equal sum"); 
 } 
} 
8)Dijikstra.java
import java.util.*; 
import java.lang.*; 
import java.io.*; 
  
class ShortestPath 
{ 
  static final int V = 9; 
  int minDistance(int dist[], Boolean sptSet[]) 
  { 
   int min = Integer.MAX_VALUE, min_index = -1; 
   for (int v = 0; v < V; v++) 
   {        
    if (sptSet[v] == false && dist[v] <= min) 
    { 
                min = dist[v]; 
                min_index = v; 
    } 
  
   }     return min_index; 
   
  } 
  void printSolution(int dist[], int n) 
  { 
   System.out.println("Vertex        Distance from Source"); 
   for (int i = 0; i < V; i++) 
       System.out.println(i + " -- " + dist[i]); 
  } 
  void dijkstra(int graph[][], int src) 
  { 
    int dist[] = new int[V]; 
    Boolean sptSet[] = new Boolean[V]; 
    for (int i = 0; i < V; i++) 
    { 
       dist[i] = Integer.MAX_VALUE; 
       sptSet[i] = false; 
    } 
    dist[src] = 0; 
    for (int count = 0; count < V - 1; count++) 
    { 
     int u = minDistance(dist, sptSet); 
     sptSet[u] = true; 
     for (int v = 0; v < V; v++) 
        if (!sptSet[v] && graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) 
             dist[v] = dist[u] + graph[u][v]; 
     } 
     printSolution(dist, V); 
  } 
  public static void main(String[] args) 
  { 
        int graph[][] = new int[][] { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
                                      { 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
                                      { 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
                                      { 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
                                      { 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
                                      { 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
                                      { 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
                                      { 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
                                      { 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 
        ShortestPath t = new ShortestPath(); 
        t.dijkstra(graph, 0); 
  } 
} 
9)Floyds.java
import java.lang.Math;
public class Floyd{
    static void fillMatrix(int[][] D){
        for(int k=0;k<D.length;k++){
            for(int i=0;i<D.length;i++){
                for(int j=0;j<D.length;j++){
                    D[i][j]= Math.min(D[i][j],D[i][k]+D[k][j]);
                }
            } 
        }
    }
   static void printMatrix(int[][] D){
        for(int i=0;i<D.length;i++){
            for(int j=0;j<D.length;j++){
                    System.out.print(D[i][j]+" ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args){
        int[][] D = new int[][]{{0,2,999,1,8},{6,0,3,2,999},{999,999,0,4,999},{999,999,2,0,3},{3,999,999,999,0}};
        fillMatrix(D);
        printMatrix(D);
    }
}
10)LongIncrSubseq.java
class LIS 
{ 
    static int lis(int arr[],int n) 
    { 
          int lis[] = new int[n]; 
          int i,j,max = 0; 
          for ( i = 0; i < n; i++ ) 
              lis[i] = 1; 
          for ( i = 1; i < n; i++ ) 
              for ( j = 0; j < i; j++ )  
                 if ( arr[i] > arr[j] && lis[i] < lis[j] + 1) 
                    lis[i] = lis[j] + 1; 
          for ( i = 0; i < n; i++ ) 
              if ( max < lis[i] ) 
                 max = lis[i]; 
  
            return max; 
    } 
  
    public static void main(String args[]) 
    { 
        int arr[] = { 10, 22, 9, 33, 21, 50, 41, 60 }; 
        int n = arr.length; 
        System.out.println("Length of lis is " + lis( arr, n ) + "\n" ); 
    } 
} 
